import java.nio.file.Paths

plugins {
    id 'application'
}

version = '1.3.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':spark-logo')
    runtimeOnly project(':spark-gui')
}

compileJava {
    if(JavaVersion.current() != JavaVersion.VERSION_1_8){
        options.release.set 8
    }
    sourceCompatibility = 8
    targetCompatibility = 8
}

application {
    mainClassName = 'org.sparklogo.SparkManager'
}

jar {
    manifest {
        attributes("Main-Class": application.mainClassName,
                   "Class-Path": configurations.runtimeClasspath
                           .findAll { it.name.startsWith('spark-logo') }
                           .collect { Paths.get("lib", it.name as String) }
                           .join(" "))
    }
}

task createSparkManagerScript(type: CreateStartScripts) {
    outputDir = file("$buildDir/scripts")
    applicationName = "spark-manager"
    mainClass.set(application.mainClassName)
    classpath = files(new File('SPARK_Manager.jar'))
    doLast {
        def script = getWindowsScript()
        script.text = script.text.replace('%APP_HOME%\\lib\\', '%APP_HOME%\\')
        script = getUnixScript()
        script.text = script.text.replace('$APP_HOME/lib/', '$APP_HOME/')
    }
}

task createSparkGuiScript(type: CreateStartScripts) {
    outputDir = file("$buildDir/scripts")
    applicationName = "spark-gui"
    mainClass.set('org.sparkabm.gui.Coordinator')
    classpath = files(configurations.runtimeClasspath.findAll { it.name.startsWith('spark-gui') })
}

task createSparkTestsScript(type: CreateStartScripts) {
    outputDir = file("$buildDir/scripts")
    applicationName = "spark-tests"
    mainClass.set('org.sparkabm.gui.tools.TestEngine')
    classpath = files(configurations.runtimeClasspath.findAll { it.name.startsWith('spark-gui') })
}

task sparkInstall(type: Sync) {
    into "$buildDir/spark"
    into('') {
        from '../LICENSE'
        from '../README.md'
        from '../logo.jpg'
    }
    // The script should be copied to bin (or another subfolder)
    into('bin') {
        from createSparkManagerScript
        from createSparkGuiScript
        from createSparkTestsScript
    }
    into('') {
        from jar
        rename { 'SPARK_Manager.jar' }
    }
    into('lib') {
        from configurations.runtimeClasspath
    }
    into('logo') {
        from '../spark-logo/logo'
        include 'commands.xml'
        include 'SparkTypes.xml'
    }
    into('samples') {
        from 'samples'
        exclude '**/*.java'
        exclude '**/*.class'
    }
    into('Licenses') {
        from 'Licenses'
    }
}

task sparkDist(type: Zip) {
    dependsOn tasks.sparkInstall
    archiveFileName = "SPARK_${project.version}_universal.zip"
    destinationDirectory = file("$buildDir/sparkDist")
    from "$buildDir/spark"
}