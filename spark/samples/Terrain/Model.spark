model TerrainModel


space GridSpace -40 40 -40 40 false false

@parameter(default = 0.1, min = 0.01, max = 1, step = 0.01)
global dt : number


global height-map : grid
global water-map : grid
global sediment : grid
global s1 : grid
global vel-u : grid
global vel-v : grid
global flux-l : grid
global flux-r : grid
global flux-t : grid
global flux-b : grid

global d1 : grid
global K-grid : grid

var counter : number

to end-step
	if counter >= 0
	[
		height-map.diffuse 0.5
		counter -= 1
	]
	
	update-flux
	update-water
;	erosion
;	sediment-transportation
end


to sediment-transportation
	var x-size = sediment.get-xsize
	var y-size = sediment.get-ysize
	
	for x = 1 : x-size - 2
	[
		for y = 1 : y-size - 2
		[
			var u = vel-u.data-at x y
			var v = vel-v.data-at x y
			
			var xx = floor (x - u * dt)
			var yy = floor (y - v * dt)
			
			ifelse xx < 0 
				[ xx = 0 ]
				[ if xx >= x-size [ xx = x-size - 1 ] ]
				
			ifelse yy < 0
				[ yy = 0 ]
				[ if yy >= y-size [ yy = y-size - 1 ] ]
				
			var s = sediment.data-at xx yy
			s1.set-data-at x y s
		]
	]
	
	sediment.data = s1.data
end


to erosion
	var x-size = height-map.get-xsize
	var y-size = height-map.get-ysize
	
	var Kc = 1
	var Ks = 0.005
	var Kd = 0.005
	
	for x = 1 : x-size - 2
	[
		for y = 1 : y-size - 2
		[
			var vu = vel-u.data-at x y
			var vv = vel-v.data-at x y
			var C = Kc * sqrt (vu * vu + vv * vv)
			
			var h = height-map.data-at x y
			var s = sediment.data-at x y
			
			ifelse C > s
			[
				h -= Ks * (C - s)
				s += Ks * (C - s)
			]
			[
				h += Kd * (s - C)
				s -= Kd * (s - C)
			]
			
			height-map.set-data-at x y h
			sediment.set-data-at x y s
		]
	]
end


to update-flux
	var x-size = flux-l.get-xsize
	var y-size = flux-l.get-ysize
	
	var A = 1
	var l = 1
	var g = 9
	var lx = 1
	var ly = 1
	
;	modify flux-l
;	[
;		var h = height-map.value + water-map.value
;		var dhl = h - height-map.value[-1,0] - water-map.value[-1,0]
;		value = max 0 (value + dt * A * g * dhl / l)
;	]

;	flux-l = max 0 (flux-l + dt * A * g * (height-map + water-map - height-map[-1,0] - water-map[-1,0]) / l)
;equations
;[
;	d1 = height-map + water-map
;	D[flux-l,t] = A * g * D-[d1, x]
;	D[flux-r,t] = A * g * D+[d1, x]
;	Dt flux-l x y = A * g * (Dx- d1 x y)
;	flux-l(boundary) = 0
;	Dt v (x,0) = a(x,0)
;]

equations
[
	d1 = height-map + water-map
	Dt flux-l = A * g * Dx- d1
	Dt flux-r = -A * g * Dxp d1
	Dt flux-b = A * g * Dy- d1
	Dt flux-t = -A * g * Dyp d1
	
	flux-l = max 0 flux-l
	flux-r = max 0 flux-r
	flux-t = max 0 flux-t
	flux-b = max 0 flux-b
	
	K-grid = max (1e-6) (flux-l + flux-r + flux-t + flux-b)
	K-grid = min 1 (water-map * lx * ly / K-grid)
	
	flux-l = K-grid * flux-l
	flux-r = K-grid * flux-r
	flux-t = K-grid * flux-t
	flux-b = K-grid * flux-b
]
	
;	for x = 1 : x-size - 2
;	[
;		for y = 1 : y-size - 2
;		[
;			var h = height-map.data-at x y + water-map.data-at x y
;		
;			var dhl = h - height-map.data-at (x - 1) y - water-map.data-at (x - 1) y
;			var dhr = h - height-map.data-at (x + 1) y - water-map.data-at (x + 1) y
;			var dht = h - height-map.data-at x (y + 1) - water-map.data-at x (y + 1)
;			var dhb = h - height-map.data-at x (y - 1) - water-map.data-at x (y - 1)
;
;			var vl = max 0 (flux-l.data-at x y + dt * A * g * dhl / l)
;			var vr = max 0 (flux-r.data-at x y + dt * A * g * dhr / l)
;			var vt = max 0 (flux-t.data-at x y + dt * A * g * dht / l)
;			var vb = max 0 (flux-b.data-at x y + dt * A * g * dhb / l)
;			
;			var v = vl + vr + vt + vb
;			var K = 0
;			if v > 1e-6
;			[
;				K = min 1 ((water-map.data-at x y * lx * ly) / v)
;			]
;			
;			flux-l.set-data-at x y (K * vl)
;			flux-r.set-data-at x y (K * vr)
;			flux-t.set-data-at x y (K * vt)
;			flux-b.set-data-at x y (K * vb)
;		]
;	]
end


to update-water
	var x-size = flux-l.get-xsize
	var y-size = flux-l.get-ysize

	for x = 1 : x-size - 2
	[
		for y = 1 : y-size - 2
		[
			var f-in = flux-r.data-at (x - 1) y + flux-t.data-at x (y - 1) 			
						+ flux-l.data-at (x + 1) y + flux-b.data-at x (y + 1)
						
			var f-out = flux-l.data-at x y + flux-r.data-at x y + flux-t.data-at x y + flux-b.data-at x y
			
			var dv = dt * (f-in - f-out)
			var w = water-map.data-at x y
			var w2 = w + dv / (1 * 1)
			var d-bar = (w + w2) / 2
			
			var dW-x = flux-r.data-at (x - 1) y - flux-l.data-at x y + 
						flux-r.data-at x y - flux-l.data-at (x + 1) y
			var dW-y = flux-t.data-at x y - flux-b.data-at x (y + 1) +
						flux-t.data-at x (y - 1) - flux-b.data-at x y
						
			water-map.set-data-at x y w2
			
			ifelse (d-bar > 1e-6)
			[ 
				vel-u.set-data-at x y (dW-x / (1 * d-bar)) 
				vel-v.set-data-at x y (dW-y / (1 * d-bar))
			]
			[
				vel-u.set-data-at x y 0
				vel-v.set-data-at x y 0
			]
			
			
		]
	]
end


to setup
end


@external
to mounts
	ask create MountAgent 100
	[
		move-to random-vector-of-length 30
	]

;	ask create MountAgent 100
;	[
;		move-to random-vector-of-length 30
;	]
	
	counter = 20
end


@external
to river
	ask create-one RiverAgent
	[
		var p = create-vector (space-xmin + 1) (space-ymin + 1) 0
		move-to p
	]
end

@external
to rain
	create-one RainAgent
end


@external
to water-source
	ask create-one WaterSource
	[
		move-to [0,0,0]
	]
	
end
