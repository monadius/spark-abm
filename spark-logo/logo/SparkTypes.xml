<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE spark-types [
<!ELEMENT types (type*)>

<!ELEMENT type (javaname?, declaration?, 
				declaration_init?,
				(get?, set?)*, get-convert?, set-convert?, 
				(field | method)*)>
<!ATTLIST type
	name		CDATA	#REQUIRED
	alias		CDATA	#IMPLIED
	parent		CDATA	#IMPLIED
	composite	(false | true)	#IMPLIED
	interface	(false | true)	#IMPLIED
>

<!ELEMENT javaname (#PCDATA)>
<!ELEMENT declaration (lhs, rhs)>

<!ELEMENT method (argument*, (translation | translation2)?)>
<!ATTLIST method
	name		CDATA	#REQUIRED
	type		CDATA	#IMPLIED
	subtype		CDATA	#IMPLIED
	abstract	(false | true) #IMPLIED
>

<!ELEMENT argument EMPTY>
<!ATTLIST argument
	name		CDATA	#REQUIRED
	type		CDATA	#REQUIRED
>

<!ELEMENT translation (#PCDATA)>
<!ELEMENT translation2 (temp*, prelude?, return?)>
]>

<types>
		<!-- double (number) -->
        <type name = "double" alias = "number"> 
                <javaname>double</javaname>

                <declaration>
                	<lhs>double @@id</lhs>
                	<rhs>0</rhs>
                </declaration>

                <declaration_init>
                        double @@id = @@value
                </declaration_init>

                <get>
                        @@id
                </get>

                <set>
                        @@id = @@value
                </set>
        </type>


		<!-- integer -->
        <type name = "$integer">
                <javaname>int</javaname>

                <declaration>
                	<lhs>int @@id</lhs>
                	<rhs>0</rhs>
                </declaration>

                <declaration_init>
                        int @@id = @@value
                </declaration_init>

                <get>
                        @@id
                </get>
                
                <set>
                        @@id = @@value
                </set>
                <get-convert to = "double">
                	<translation>
                		(double)(@@this)
                	</translation>
                </get-convert>
                
                <set-convert to = "double">
                	<translation>
                		@@this = (int)(@@value) 
                	</translation>
                </set-convert>
        </type>

        

        <!-- string -->
        <type name = "string" parent = "$Object">
        	<javaname>String</javaname>

			<declaration>
				<lhs>String @@id</lhs>
				<rhs>""</rhs>
			</declaration>
			
			<get>
				@@id
			</get>        	

			<set>
				@@id = @@value
			</set>
			
			<method name = "split" type = "ArrayList" subtype = "ArgumentType:regex">
				<argument name = "regex" type = "string"/>
				<translation>
					StringUtils.split(@@object, @regex)
				</translation>
			</method>
			
			<method name = "length" type = "double">
			</method>
			
			
			<method name = "trim" type = "string">
				<translation>
					@@object.trim()
				</translation>
			</method>
			
			
			<method name = "to-num" type = "double">
				<translation>
					StringUtils.StringToDouble(@@object)
				</translation>
			</method>
			
			<method name = "to-int" type = "$integer">
				<translation>
					StringUtils.StringToInteger(@@object)
				</translation>
			</method>
			
			<method name = "starts-with" type = "boolean">
				<argument name = "str" type = "string"/>
				<translation>
					@@object.startsWith(@str)
				</translation>
			</method>
			
			<method name = "substring" type = "string">
				<argument name = "begin" type = "double"/>
				<argument name = "end" type = "double"/>
				<translation>
					@@object.substring((int)@begin, (int)@end)
				</translation>
			</method>
			
			<method name = "substring-end" type = "string">
				<argument name = "begin" type = "double"/>
				<translation>
					@@object.substring((int)@begin)
				</translation>
			</method>
			
			<method name = "char-at" type = "double">
				<argument name = "i" type = "double"/>
				<translation>
					@@object.charAt((int)@i)
				</translation>
			</method>
        </type>



		<!-- long -->
        <type name = "$long">
                <javaname>long</javaname>

                <declaration>
                	<lhs>long @@id</lhs>
                	<rhs>0</rhs>
                </declaration>

                <declaration_init>
                        long @@id = @@value
                </declaration_init>

                <get>
                        @@id
                </get>

                <set>
                        @@id = @@value
                </set>
        </type>
        
        <!-- Simulation Time -->
        <type name = "$time">
        	<javaname>SimulationTime</javaname>
        	
            <method name = "elapsed-time" type = "double">
	          	<translation>
               		@@object.getElapsedTime()
                </translation>
            </method>
            
            <method name = "total-time" type = "double">
            	<translation>
            		@@object.getTotalTime()
            	</translation>
            </method>
        </type>

        
        <!-- boolean (bool) -->
        <type name = "boolean" alias = "bool">
                <javaname>boolean</javaname>

                <declaration>
                	<lhs>boolean @@id</lhs>
                	<rhs>false</rhs>
                </declaration>

                <set>
                        @@id = @@value
                </set>

                <get>
                        @@id
                </get>
        </type>
        
        
        <!--  Array list -->
        <type name = "ArrayList" composite = "true" parent = "$Object" alias = "List">
                <javaname>ArrayList&lt;@subtype&gt;</javaname>

                <set>
                        @@id = @@value
                </set>

                <get>
                        @@id
                </get>
                
                <method name = "add">
                	<argument name = "object" type = "$Object"/>
                </method>
                
                <method name = "add-at">
                	<argument name = "i" type = "number"/>
                	<argument name = "obj" type = "$Object"/>
                	<translation>
                		@@object.add((int)@i, @obj)
                	</translation>
                </method>
                
                
                <method name = "add-all">
                	<argument name = "list" type = "ArrayList"/>
                	<translation>
                		@@object.addAll(@list)
                	</translation>
                </method>

                <method name = "add-all-at">
                	<argument name = "i" type = "number"/>
                	<argument name = "list" type = "ArrayList"/>
                	<translation>
                		@@object.addAll((int)@i, @list)
                	</translation>
                </method>
                
                <method name = "clear">
                	<translation>
                		@@object.clear()
                	</translation>
                </method>
                
                <method name = "set">
                	<argument name = "i" type = "number"/>
                	<argument name = "val" type = "$Object"/>
                	
                	<translation>
                		@@object.set((int) @i, @val)
                	</translation>
                </method>
                
                <method name = "remove-at">
                	<argument name = "i" type = "number"/>
                	<translation>
                		@@object.remove((int)@i)
                	</translation>
                </method>
                
                <method name = "remove">
                	<argument name = "obj" type = "$Object"/>
                	<translation>
                		@@object.remove(@obj)
                	</translation>
                </method>

                <method name = "remove-all">
                	<argument name = "list" type = "ArrayList"/>
                	<translation>
                		@@object.removeAll(@list)
                	</translation>
                </method>
                
                <method name = "contains" type = "boolean">
                	<argument name = "obj" type = "$Object"/>
                	<translation>
                		@@object.contains(@obj)
                	</translation>
                </method>
        </type>


		<!-- Array -->
        <type name = "Array" composite = "true" parent = "$Object">
                <javaname>@subtype[]</javaname>

                <set>
                        @@id = @@value
                </set>

                <get>
                        @@id
                </get>
        </type>


		<type name = "$NullObject">
			<javaname>null</javaname>
		</type>


		<type name = "$Object" parent = "$NullObject">
			<javaname>Object</javaname>
		</type>


		<!-- Vector -->
        <type name = "vector" parent = "$Object">
                <javaname>Vector</javaname>

                <declaration>
                	<lhs>Vector @@id</lhs>
                	<rhs>new Vector()</rhs>
                </declaration>

                <declaration_init>
                        Vector @@id = new Vector(@@value)
                </declaration_init>

                <set>
                        @@id.set(@@value)
                </set>

                <get>
                        @@id
                </get>

                <field name = "x" type = "double" />
                <field name = "y" type = "double" />
                <field name = "z" type = "double" />

                <method name = "add" type = "vector">
                        <argument name = "v" type = "vector"/>
                </method>
                
                
                <method name = "normalize" type = "vector">
                </method>
               
               	
               	<method name = "truncate-length" type = "vector">
               		<argument name = "length" type = "double"/>
               		<translation>
               			@@object.truncateLength(@length)
               		</translation>
               	</method>
               
                
                <field name = "length" type = "double">
                	<get>@@object.length()</get>
                </field>
                
                
                <method name = "length-squared" type = "double">
                	<translation>
                		@@object.lengthSquared()
                	</translation>
                </method>
                
                
                <method name = "dot" type = "double">
                	<argument name = "v" type = "vector"/>
                	<translation>
                		@@object.dot(@v)
                	</translation>
                </method>
                
                
                <method name = "copy" type = "vector">
                	<translation>
                		(new Vector(@@object))
                	</translation>
                </method>
                
                
                <method name = "cross" type = "vector">
                	<argument name = "v" type = "vector"/>
                	<translation>
                		@@object.cross(@v)
                	</translation>
                </method>
                

                <method name = "parallel-component" type = "vector">
                	<argument name = "unit-vector" type = "vector"/>
                	<translation>
                		@@object.parallelComponent(@unit-vector)
                	</translation>
                </method>


                <method name = "perpendicular-component" type = "vector">
                	<argument name = "unit-vector" type = "vector"/>
                	<translation>
                		@@object.perpendicularComponent(@unit-vector)
                	</translation>
                </method>
               
        </type>


		<!-- Complex -->
        <type name = "complex" parent = "$Object">
                <javaname>Complex</javaname>

                <declaration>
                	<lhs>Complex @@id</lhs>
                	<rhs>Complex.Zero</rhs>
                </declaration>

                <declaration_init>
                        Complex @@id = new Complex(@@value)
                </declaration_init>

                <set>
                        @@id = @@value
                </set>

                <get>
                        @@id
                </get>

                <field name = "re" type = "double">
                	<get>@@object.re()</get>
                </field>
                <field name = "im" type = "double">
                	<get>@@object.im()</get>
                </field>
                
                <field name = "abs" type = "double">
                	<get>@@object.abs()</get>
                </field>
                
                <field name = "arg" type = "double">
                	<get>@@object.phase()</get>
                </field>

                
				<method name = "reciprocal" type = "complex">
				</method>
				
				
				<method name = "conjugate" type = "complex">
				</method>                
        </type>
        

		<!-- Reader -->        
        <type name = "Reader" parent = "$Object">
        	<javaname>java.io.BufferedReader</javaname>
        	
            <set>
               @@id = @@value
            </set>

            <get>
               @@id
            </get>
            
            <method name = "close">
            	<translation>
            		FileUtils.close(@@object)
            	</translation>
            </method>
            
            <method name = "read-line" type = "string">
            	<translation>
            		FileUtils.readLine(@@object)
            	</translation>
            </method>

            <method name = "read-num" type = "double">
            	<translation>
            		FileUtils.readDouble(@@object)
            	</translation>
            </method>

            <method name = "read-bool" type = "boolean">
            	<translation>
            		FileUtils.readBool(@@object)
            	</translation>
            </method>
            
            <method name = "read-int" type = "$integer">
            	<translation>
            		FileUtils.readInteger(@@object)
            	</translation>
            </method>
            
            <method name = "read-vector" type = "vector">
            	<translation>
            		FileUtils.readVector(@@object, ";")
            	</translation>
            </method>
            
        </type>

		<!-- Writer -->
        <type name = "Writer" parent = "$Object">
        	<javaname>java.io.PrintWriter</javaname>
        	
            <set>
               @@id = @@value
            </set>

            <get>
               @@id
            </get>
            
            <method name = "close">
            	<translation>
            		FileUtils.close(@@object)
            	</translation>
            </method>
            
            <method name = "write-line">
            	<argument name = "line" type = "string"/>
            	<translation>
            		FileUtils.writeLine(@@object, @line)
            	</translation>
            </method>

            <method name = "write-num">
            	<argument name = "n" type = "number"/>
            	<translation>
            		FileUtils.writeDouble(@@object, @n)
            	</translation>
            </method>
            
            <method name = "write-bool">
            	<argument name = "b" type = "boolean"/>
            	<translation>
            		FileUtils.writeBool(@@object, @b)
            	</translation>
            </method>
            
            <method name = "write-vector">
            	<argument name = "v" type = "vector"/>
            	<translation>
            		FileUtils.writeVector(@@object, @v)
            	</translation>
            </method>
            
            <method name = "write-obj">
            	<argument name = "obj" type = "$Object"/>
            	<translation>
            		FileUtils.writeLine(@@object, @obj == null ? "null" : @obj.toString())
            	</translation>
            </method>
        </type>
        

        <!-- KeyEvent -->
       	<type name = "KeyEvent" parent = "$Object">
               	<javaname>ControlState.KeyEvent</javaname>

                <set>
                        @@id = @@value
                </set>

                <get>
                        @@id
                </get>
                
                <field name = "pressed" type = "boolean">
                	<get>@@object.keyPressed</get>
                </field>
                
                <field name = "name" type = "string">
                	<get>@@object.name</get>
                </field>
                
                <field name = "space-name" type = "string">
                	<get>@@object.spaceName</get>
                </field>
        </type>
        
        
        <!-- MouseEvent -->
       	<type name = "MouseEvent" parent = "$Object">
               	<javaname>ControlState.MouseEvent</javaname>

                <set>
                        @@id = @@value
                </set>

                <get>
                        @@id
                </get>
                
                <field name = "event-type" type = "string">
                	<get>@@object.eventType</get>
                </field>
                
                <field name = "position" type = "vector">
                	<get>@@object.position</get>
                </field>
                
                <field name = "buttons" type = "$integer">
                	<get>@@object.buttons</get>
                </field>
                
                <field name = "wheel" type = "$integer">
                	<get>@@object.mouseWheel</get>
                </field>

                <field name = "space-name" type = "string">
                	<get>@@object.spaceName</get>
                </field>
        </type>        

	


		<!-- $ means translator-only name, user cannot use this type explicitly -->
		<type name = "$model">
			<javaname>SparkModel</javaname>
			
			<method name = "$StandardSpace">
				<argument name = "xMin" type = "double"/>
				<argument name = "xMax" type = "double"/>
				<argument name = "yMin" type = "double"/>
				<argument name = "yMax" type = "double"/>
				<argument name = "xWrap" type = "boolean"/>
				<argument name = "yWrap" type = "boolean"/>
				
				<translation>
					StandardSpace __space = new StandardSpace(@xMin, @xMax, @yMin, @yMax, @xWrap, @yWrap);
					Observer.getInstance().addSpace("space", __space)
				</translation>
			</method>
			
			<method name = "$GridSpace">
				<argument name = "xMin" type = "double"/>
				<argument name = "xMax" type = "double"/>
				<argument name = "yMin" type = "double"/>
				<argument name = "yMax" type = "double"/>
				<argument name = "xWrap" type = "boolean"/>
				<argument name = "yWrap" type = "boolean"/>
				
				<translation>
					GridSpace __space = new GridSpace(@xMin, @xMax, @yMin, @yMax, @xWrap, @yWrap);
					Observer.getInstance().addSpace("space", __space)
				</translation>
				
			</method>
			
			
			<method name = "$GridSpace3d">
				<argument name = "xMin" type = "double"/>
				<argument name = "xMax" type = "double"/>
				<argument name = "yMin" type = "double"/>
				<argument name = "yMax" type = "double"/>
				<argument name = "zMin" type = "double"/>
				<argument name = "zMax" type = "double"/>
				<argument name = "xWrap" type = "boolean"/>
				<argument name = "yWrap" type = "boolean"/>
				<argument name = "zWrap" type = "boolean"/>
				
				<translation>
					GridSpace3d __space = new GridSpace3d(@xMin, @xMax, @yMin, @yMax, @zMin, @zMax, @xWrap, @yWrap, @zWrap);
					Observer.getInstance().addSpace("space", __space)
				</translation>
				
			</method>


			<method name = "$StandardSpace3d">
				<argument name = "xMin" type = "double"/>
				<argument name = "xMax" type = "double"/>
				<argument name = "yMin" type = "double"/>
				<argument name = "yMax" type = "double"/>
				<argument name = "zMin" type = "double"/>
				<argument name = "zMax" type = "double"/>
				<argument name = "xWrap" type = "boolean"/>
				<argument name = "yWrap" type = "boolean"/>
				<argument name = "zWrap" type = "boolean"/>
				
				<translation>
					StandardSpace3d __space = new StandardSpace3d(@xMin, @xMax, @yMin, @yMax, @zMin, @zMax, @xWrap, @yWrap, @zWrap);
					Observer.getInstance().addSpace("space", __space)
				</translation>
				
			</method>
			
			
			<method name = "$PhysicalSpace2d">
				<argument name = "xMin" type = "double"/>
				<argument name = "xMax" type = "double"/>
				<argument name = "yMin" type = "double"/>
				<argument name = "yMax" type = "double"/>
				<argument name = "xWrap" type = "boolean"/>
				<argument name = "yWrap" type = "boolean"/>
				
				<translation>
					PhysicalSpace2d __space = new PhysicalSpace2d(@xMin, @xMax, @yMin, @yMax, @xWrap, @yWrap);
					Observer.getInstance().addSpace("space", __space)
				</translation>
				
			</method>
		</type>
		
		
		<type name = "Space" parent = "$Object">
			<javaname>Space</javaname>
		
		    <method name = "create" type = "Array" subtype = "ArgumentType:type">
                <argument name = "type" type = "NameType" />
                <argument name = "number" type = "double" />

                <translation2>
                        <temp name = "nn"/>
                        <temp name = "agents"/>
                        <temp name = "i"/>
                        <prelude>
                                int @nn = (int)(@number);
                                @type[] @agents = new @type[@nn];
                                for (int @i = 0; @i &lt; @nn; @i++)
                                {
                                        @agents[@i] = new @type();
                                        @agents[@i].moveToSpace(@@object, new Vector());
                                }
                        </prelude>
                        <return>
                                @agents
                        </return>
                </translation2>
        	</method>



               <method name = "create-one" type = "ArgumentType:type">
                	<argument name = "type" type = "NameType"/>
                	
                	<translation2>
                		<temp name = "agent" type = "@type"/>
                		<prelude>
                			@agent = new @type();
                			@agent.moveToSpace(@@object, new Vector());
                		</prelude>
                		<return>
               		    	@agent
               		    </return>
                	</translation2>
                </method>
             
             
             <method name = "space-xmin" type = "double">
             	<translation>((BoundedSpace) @@object).getXMin()</translation>
             </method>   


             <method name = "space-xmax" type = "double">
             	<translation>
             		((BoundedSpace) @@object).getXMax()
             	</translation>
             </method>

             <method name = "space-ymin" type = "double">
             	<translation>
             		((BoundedSpace) @@object).getYMin()
             	</translation>
             </method>
             
             <method name = "space-ymax" type = "double">
             	<translation>
             		((BoundedSpace) @@object).getYMax()
             	</translation>
             </method>

                
             <method name = "x-size" type = "double">
             	<translation>
             		((BoundedSpace) @@object).getXSize()
             	</translation>
             </method>
             
             <method name = "y-size" type = "double">
             	<translation>
             		((BoundedSpace) @@object).getYSize()
             	</translation>
             </method>

             <method name = "x-min" type = "double">
             	<translation>
             		((BoundedSpace) @@object).getXMin()
             	</translation>
             </method>

             <method name = "x-max" type = "double">
             	<translation>
             		((BoundedSpace) @@object).getXMax()
             	</translation>
             </method>

             <method name = "y-min" type = "double">
             	<translation>
             		((BoundedSpace) @@object).getYMin()
             	</translation>
             </method>
             
             <method name = "y-max" type = "double">
             	<translation>
             		((BoundedSpace) @@object).getYMax()
             	</translation>
             </method>
             
             
             <method name = "get-grid" type = "$DataLayer">
             	<argument name = "name" type = "string"/>
             	
             	<translation>
             		@@object.getDataLayer(@name)
             	</translation>
             </method>
             
             
             <method name = "agents-at" type = "ArrayList" subtype = "ArgumentType:type">
                <argument name = "type" type = "NameType"/>
                <argument name = "point" type = "vector"/>
                <argument name = "radius" type = "double"/>

                <translation2>
                        <temp name = "result"/>
                        <prelude>
                                ArrayList&lt;@type&gt; @result = @@object.getAgents(@point, @radius, @type.class);
                        </prelude>
                        <return>
                                @result
                        </return>
                </translation2>
        	</method>
        	
        	
          	<method name = "agents-at-as" type = "ArrayList" subtype = "ArgumentType:type">
                <argument name = "type" type = "NameType"/>
                <argument name = "point" type = "vector"/>
                <argument name = "radius" type = "double"/>

                <translation2>
                        <temp name = "result"/>
                        <prelude>
                                ArrayList&lt;@type&gt; @result = @@object.getAgentsOfKind(@point, @radius, @type.class);
                        </prelude>
                        <return>
                                @result
                        </return>
                </translation2>
        	</method>


    	    <method name = "agents-here" type = "ArrayList" subtype = "ArgumentType:type">
                <argument name = "type" type = "NameType"/>

                <translation2>
                        <temp name = "result"/>
                        <prelude>
                                ArrayList&lt;@type&gt; @result = @@object.getAgents(@@self, @type.class);
                        </prelude>
                        <return>
                                @result
                        </return>
                </translation2>
	        </method>


    	    <method name = "agents-here-as" type = "ArrayList" subtype = "ArgumentType:type">
                <argument name = "type" type = "NameType"/>

                <translation2>
                        <temp name = "result"/>
                        <prelude>
                                ArrayList&lt;@type&gt; @result = @@object.getAgentsOfKind(@@self, @type.class);
                        </prelude>
                        <return>
                                @result
                        </return>
                </translation2>
	        </method>



        	<method name = "all-agents-at" type = "ArrayList" subtype = "SpaceAgent">
                <argument name = "point" type = "vector"/>
                <argument name = "radius" type = "double"/>

                <translation2>
                        <temp name = "result"/>
                        <prelude>
                                ArrayList&lt;SpaceAgent&gt; @result = @@object.getAgents(@point, @radius);
                        </prelude>
                        <return>
                                @result
                        </return>
                </translation2>
        	</method>


        	<method name = "all-agents-here" type = "ArrayList" subtype = "SpaceAgent">
                <translation2>
                        <temp name = "result"/>
                        <prelude>
                                ArrayList&lt;SpaceAgent&gt; @result = @@object.getAgents(@@self);
                        </prelude>
                        <return>
                                @result
                        </return>
                </translation2>
        	</method>
        	
        	<method name = "process-nodes"/>
		</type>


		<!-- Shape Info -->
		<type name = "ShapeInfo" parent = "$Object">
			<javaname>PhysicalNode.ShapeInfo</javaname>
		</type>

		<!-- Agent Data -->
		<type name = "AgentData" parent = "$Object">
			<javaname>AgentData</javaname>
			
			<method name = "add">
				<argument name = "name" type = "string"/>
				<argument name = "value" type = "string"/>
			</method>
		</type>

		<!-- Agent -->
		<type name = "Agent" parent = "$Object">
			<javaname>Agent</javaname>

            <method name = "die">
            </method>
            
            <method name = "is-dead" type = "boolean">
            </method>
            
            
            <method name = "get-data" type = "AgentData">
            </method>
            
            
            <method name = "all-links" type = "ArrayList" subtype = "AbstractLink">
            	<translation2>
            		<temp name = "links"/>
            		<prelude>
            			ArrayList&lt;Link&gt; @links = @@object.getLinks();  
            		</prelude>
            		<return>
            			@links
            		</return>
            	</translation2>
            </method>


            <method name = "links-of-type" type = "ArrayList" subtype = "ArgumentType:type">
            	<argument name = "type" type = "NameType"/>
            	<translation2>
            		<temp name = "links"/>
    	        	<prelude>
	            		ArrayList&lt;@type&gt; @links = @@object.getLinks(@type.class);  
            		</prelude>
            		<return>
            			@links
            		</return>
            	</translation2>
            </method>
            
            
            <method name = "link" type = "AbstractLink">
            	<argument name = "agent" type = "Agent"/>
            	<translation>
            		@@object.getFirstConnection(@agent)
            	</translation>
            </method>
            
            
            <method name = "link-of-type" type = "ArgumentType:type">
            	<argument name = "type" type = "NameType"/>
            	<argument name = "agent" type = "Agent"/>
            	
            	<translation>
            		@@object.getFirstConnection(@agent, @type.class)
            	</translation>
            </method>

		</type>


		<type name = "AbstractLink" parent = "Agent">
			<javaname>Link</javaname>
			
			<method name = "connect">
				<argument name = "end1" type = "Agent"/>
				<argument name = "end2" type = "Agent"/>
				
				<translation>
					@@object.connect(@end1, @end2)
				</translation>
			</method>
		</type>
		
		
		<type name = "Link" parent = "AbstractLink">
			<javaname>SpaceLink</javaname>
			
            <field name = "color" type = "vector">
              	<set>@@object.setColor(@@value)</set>
               	<get>@@object.getRGBColor()</get>
            </field>
            
            <field name = "width" type = "double">
            	<set>@@object.setWidth(@@value)</set>
            	<get>@@object.getWidth()</get>
            </field>
            
            
            <field name = "end1" type = "SpaceAgent">
            	<get>@@object.getEnd1()</get>
            </field>		
            
            
            <field name = "end2" type = "SpaceAgent">
            	<get>@@object.getEnd2()</get>
            </field>
            
            
            <method name = "distance" type = "vector">
            	<translation2>
            		<temp name = "result" type = "vector"/>
            		<prelude>
            			@result = @@object.getVector();
            			if (@result == null)
            				@result = new Vector();
            		</prelude>
            		<return>
            			@result
            		</return>
            	</translation2>
            </method> 
       	</type>
       	
       	
       	<!-- DistanceJoint -->
       	<type name = "DistanceJoint" parent = "Link">
			<javaname>DistanceJointLink</javaname>

			<field name = "anchor1" type = "vector">
				<set>@@object.setAnchor1(@@value)</set>
			</field>			

			<field name = "anchor2" type = "vector">
				<set>@@object.setAnchor2(@@value)</set>
			</field>
			
			<method name = "params">
				<argument name = "freq" type = "double"/>
				<argument name = "damping" type = "double"/>
				<translation>
					@@object.setParams((float) @freq, (float) @damping)
				</translation>
			</method>			
       	</type>
       	
       	
       	<!-- RevoluteJoint -->
       	<type name = "RevoluteJoint" parent = "Link">
			<javaname>RevoluteJointLink</javaname>

			<field name = "anchor" type = "vector">
				<set>@@object.setAnchor(@@value)</set>
			</field>
			
			
			<method name = "set-limits">
				<argument name = "lo" type = "double"/>
				<argument name = "hi" type = "double"/>
				
				<translation>
					@@object.setLimits(@lo, @hi)
				</translation>
			</method>
			
			
			<field name = "motor-speed" type = "double">
				<set>@@object.setMotorSpeed(@@value)</set>
			</field>
			
			<field name = "motor-torque" type = "double">
				<set>@@object.setMotorTorque(@@value)</set>
			</field>
			
			
			<field name = "angle" type = "double">
				<get>@@object.getAngle()</get>
			</field>			
       	</type>
       	
       	
       	<!-- PrismaticJoint -->
       	<type name = "PrismaticJoint" parent = "Link">
			<javaname>PrismaticJointLink</javaname>

			<field name = "anchor" type = "vector">
				<set>@@object.setAnchor(@@value)</set>
			</field>
			
			<field name = "axis" type = "vector">
				<set>@@object.setAxis(@@value)</set>
			</field>
			
			<field name = "lower-limit" type = "double">
				<set>@@object.setLowerLimit(@@value)</set>
			</field>			
			
			<field name = "upper-limit" type = "double">
				<set>@@object.setUpperLimit(@@value)</set>
			</field>
       	</type>
		
		
		<!-- SpaceAgent -->
        <type name = "SpaceAgent" parent = "Agent">
                <javaname>SpaceAgent</javaname>

                <set>
                	@@id = @@value
                </set>

                <get>
                	@@id
                </get>

                <method name = "move">
                        <argument name = "v" type = "vector"/>
                </method>
                
                <method name = "get-agent-space" type = "Space">
                	<translation>
                		@@object.getNode().getSpace()
                	</translation>
                </method>
                
                <method name = "move-to">
                	<argument name = "p" type = "vector"/>
                	<translation>
                		@@object.moveTo(@p)
                	</translation> 
                </method>
                
                <method name = "get-position" type = "vector">
                </method>
                
                <method name = "super">
                	<argument name = "radius" type = "double"/>
                	<argument name = "shape" type = "$integer"/>
                	
                	<translation>
                		super(@radius, @shape)
                	</translation>
                </method>
                
                <field name = "label" type = "string">
                	<get>@@object.getLabel()</get>
                	<set>@@object.setLabel(@@value)</set>
                </field>

                <field name = "position" type = "vector">
                 <get>@@object.getPosition()</get>
                </field>
                
                <field name = "color" type = "vector">
                	<set>@@object.setColor(@@value)</set>
                	<get>@@object.getRGBColor()</get>
                </field>
                
                <field name = "alpha" type = "double">
                	<set>@@object.getNode().setAlpha(@@value)</set>
                	<get>@@object.getNode().getAlpha()</get>
                </field>
                
                <field name = "rotation" type = "double">
                	<set>@@object.getNode().setRotation(@@value)</set>
                	<get>@@object.getNode().getRotation()</get>
                </field>
                
                <field name = "fixed-rotation" type = "boolean">
                	<set>((PhysicalNode)@@object.getNode()).setFixedRotationFlag(@@value)</set>
                </field>
                
                <field name = "restitution" type = "double">
                	<set>((PhysicalNode)@@object.getNode()).setRestitution((float)@@value)</set>
                </field>

                <field name = "radius" type = "double">
                	<set>((CircleNode) @@object.getNode()).setRadius(@@value)</set>
                	<get>@@object.getNode().getRelativeSize()</get>
                </field>
                
                
                <field name = "shape" type = "ShapeInfo">
                	<set>((PhysicalNode)@@object.getNode()).changeShape(@@value)</set>
                </field>
                
                <field name = "density" type = "double">
                	<set>((PhysicalNode)@@object.getNode()).setDensity((float)@@value)</set>
                </field>
                
                <field name = "bullet-flag" type = "boolean">
                	<set>((PhysicalNode)@@object.getNode()).setBullet(@@value)</set>
                </field>
                
                <method name = "update-proxy">
                	<translation>
                		((PhysicalNode) @@object.getNode()).updateProxy()
                	</translation>
                </method>
                
                
                <method name = "set-collision-category">
                	<argument name = "category" type = "double"/>
                   	<translation>
                		((PhysicalNode) @@object.getNode()).setCollisionCategory((int) @category)
                	</translation>
                </method>
                
                <method name = "add-collision-category">
                	<argument name = "category" type = "double"/>
                	<translation>
                		((PhysicalNode) @@object.getNode()).addCollisionCategory((int) @category)
                	</translation>
                </method>

                <method name = "add-collision-mask">
                	<argument name = "mask" type = "double"/>
                	<translation>
                		((PhysicalNode) @@object.getNode()).addCollisionMask((int) @mask)
                	</translation>
                </method>

                <method name = "remove-collision-category">
                	<argument name = "category" type = "double"/>
                	<translation>
                		((PhysicalNode) @@object.getNode()).removeCollisionCategory((int) @category)
                	</translation>
                </method>

                <method name = "remove-collision-mask">
                	<argument name = "mask" type = "double"/>
                	<translation>
                		((PhysicalNode) @@object.getNode()).removeCollisionMask((int) @mask)
                	</translation>
                </method>

<!--                 
				<method name = "set-shape">
					<argument name = "shape" type = "$integer"/>
					<translation>
						@@object.setShape(@shape)
					</translation>
				</method>
 -->
                
                <method name = "set-random-position">
                </method>
                
                <method name = "hatch-one" type = "ArgumentType:type">
                	<argument name = "type" type = "NameType"/>
                	
                	<translation2>
                		<temp name = "agent" type = "@type"/>
                		<prelude>
                			@agent = new @type();
                			@agent.moveToSpace(@@object.getSpace(), @@object.getPosition());
                		</prelude>
                		<return>
               		    	@agent
               		    </return>
                	</translation2>
                </method>
                
                <method name = "hatch" type = "Array" subtype = "ArgumentType:type">
                	<argument name = "type" type = "NameType"/>
                	<argument name = "number" type = "double"/>
                	
                	<translation2>
                		<temp name = "agents"/>
                		<temp name = "nn"/>
                		<temp name = "pos"/>
                		<temp name = "space"/>
                		<temp name = "i"/>
                		<prelude>
                			int @nn = (int)(@number);
                			Vector @pos = @@object.getPosition();
                			Space @space = @@object.getSpace();
                			@type[] @agents = new @type[@nn];
                			for (int @i = 0; @i &lt; @nn; @i++)
                			{
                				@agents[@i] = new @type();
                				@agents[@i].moveToSpace(@space, @pos);
                			}
                		</prelude>
                		<return>
                			@agents
                		</return>
                	</translation2>
                </method>
                
                
                <method name = "move-to-space">
                	<argument name = "space" type = "Space"/>
                	<argument name = "position" type = "vector"/>
                	
                	<translation>
                		@@object.moveToSpace(@space, @position)
                	</translation>
                </method>
                
                
                <method name = "apply-force">
                	<argument name = "force" type = "vector"/>
                	<translation>
                		((PhysicalNode) @@object.getNode()).applyForce(@force)
                	</translation>
                </method>


                <method name = "apply-impulse">
                	<argument name = "force" type = "vector"/>
                	<translation>
                		((PhysicalNode) @@object.getNode()).applyImpulse(@force)
                	</translation>
                </method>
                
                
                <method name = "get-velocity" type = "vector">
                	<translation>
                		((PhysicalNode) @@object.getNode()).getVelocity()
                	</translation>
                </method>
                
                
                <method name = "hide">
                	<translation>
                		/*@@object.setVisible(false)*/
                	</translation>
                </method>
                
                
                <method name = "show">
                	<translation>
                		/*@@object.setVisible(true)*/
                	</translation>
                </method>
                
                
                <method name = "uphill">
                	<argument name = "data" type = "grid"/>
                	<translation2>
                		<temp name = "v" type = "vector"/>
                		<prelude>
                			@v = @data.getUphillDirection(@@object.getPosition());
                			@@object.move(@v)
                		</prelude>
                	</translation2>
                </method>
        </type>



		<type name = "$DataLayer" parent = "$Object">
              <method name = "value-here" type = "double">
                	<translation>
                		@@object.getValue(@@self)
                	</translation>
              </method>
                
              <method name = "set-value-here">
                	<argument name = "value" type = "double"/>
                	<translation>
                		@@object.setValue(@@self, @value)
                	</translation>
              </method>
                
               <method name = "add-value-here">
                	<argument name = "value" type = "double"/>
                	<translation>
                		@@object.addValue(@@self, @value)
                	</translation>
              </method>
                
               <method name = "value-at" type = "double">
                	<argument name = "p" type = "vector"/>
                	<translation>
                		@@object.getValue(@p)
                	</translation>
               </method>
                
               <method name = "set-value-at">
                	<argument name = "p" type = "vector"/>
                	<argument name = "value" type = "double"/>
                	<translation>
                		@@object.setValue(@p, @value)
                	</translation>
               </method>
                
               <method name = "add-value-at">
                	<argument name = "p" type = "vector"/>
                	<argument name = "value" type = "double"/>
                	<translation>
                		@@object.addValue(@p, @value)
                	</translation>
               </method>
                
               <method name = "set-value">
                	<argument name = "value" type = "double"/>
                	<translation>
                		@@object.setValue(@value)
                	</translation>
               </method>
                
               <method name = "multiply">
                	<argument name = "value" type = "double"/>
                	
                	<translation>
                		@@object.multiply(@value)
                	</translation>
               </method>

               <method name = "evaporate">
                	<argument name = "value" type = "double"/>
                	
                	<translation>
                		@@object.multiply(@value)
                	</translation>
               </method>

               <method name = "diffuse">
                	<argument name = "value" type = "double"/>
                	
                	<translation>
                		@@object.diffuse(@value)
                	</translation>
               </method>
                
               <field name = "value" type = "double">
                	<set>@@object.setValue(@@self, @@value)</set>
                	<get>@@object.getValue(@@self)</get>
               </field>
                
				<method name = "data-at" type = "double">
					<argument name = "i" type = "double"/>
					<argument name = "j" type = "double"/>
					<translation>
						@@object.getValue((int)(@i), (int)(@j))
					</translation>
				</method>                

				<method name = "set-data-at">
					<argument name = "i" type = "double"/>
					<argument name = "j" type = "double"/>
					<argument name = "val" type = "double"/>
					<translation>
						@@object.setValue((int)(@i), (int)(@j), @val)
					</translation>
				</method>                

				<method name = "add-data-at">
					<argument name = "i" type = "double"/>
					<argument name = "j" type = "double"/>
					<argument name = "val" type = "double"/>
					<translation>
						@@object.addValue((int)(@i), (int)(@j), @val)
					</translation>
				</method>                

				<method name = "max">
					<translation>
						@@object.getMax()
					</translation>
				</method>
				
				
				<method name = "min">
					<translation>
						@@object.getMin()
					</translation>
				</method>
				
				
				<method name = "total-value">
					<translation>
						@@object.getTotalNumber()
					</translation>
				</method>
				
				
				<method name = "total-value-in-region" type = "double">
					<argument name = "x-min" type = "double"/>
					<argument name = "x-max" type = "double"/>
					<argument name = "y-min" type = "double"/>
					<argument name = "y-max" type = "double"/>
					<translation>
						@@object.getTotalNumber(@x-min, @x-max, @y-min, @y-max)
					</translation>
				</method>
		</type>


		<!-- Grid -->
        <type name = "grid" parent = "$DataLayer">
                <javaname>Grid</javaname>

                <declaration>
                	<lhs>Grid @@id</lhs>
                	<rhs>null</rhs>
                </declaration>
                
                <set>
                	@@id = @@value
                </set>
                
                <get>
                	@@id
                </get>

                <set context = "model">
                        for (int i = 0; i &lt; xsize; i++)
                                for (int j = 0; j &lt; ysize; j++) {
                                        @@this.setValue(i, j, @value);
                                }
                </set>

                <get context = "model">
                        @@this.getValue(i, j)
                </get>

                <get-convert context = "agent" to = "double">
                    @@this.getValue(@@self)
                </get-convert>

                <set-convert context = "agent" to = "double">
                	@@object.setValue(@@self, @@value)
                </set-convert>

                <method name = "get-smooth-gradient" type = "vector">
                	<argument name = "point" type = "vector"/>
                </method>
                
                <method name = "uphill-direction" type = "vector">
                	<argument name = "point" type = "vector"/>
                	<translation>
                		@@object.getUphillDirection(@point);
                	</translation>
                </method>
                
                <!-- The next two methods are for debugging purposes only -->
                <method name = "get-xsize" type = "double">
                	<translation>
                		@@object.getData().length
                	</translation>
                </method>
                
                <method name = "get-ysize" type = "double">
                	<translation>
                		@@object.getData()[0].length
                	</translation>
                </method>
                
                
                <method name = "diffuse-with-mask">
                	<argument name = "p" type = "double"/>
                	<argument name = "mask" type = "grid"/>
                	
                	<translation>
                		@@object.diffuse(@p, @mask)
                	</translation>
                </method>
                
                
                
                <!-- TODO: experimental feature (to be removed later) -->
                <field name = "data" type = "double">
                	<set>
                		{
                			double[][] _data = @@object.getData();
                			
                			for (int _i = 0; _i &lt; _data.length; _i++)
                			{
                				for (int _j = 0; _j &lt; _data[0].length; _j++)
                				{
                					_data[_i][_j] = @@value;
                				}
                			}   
                		}
                	</set>
                	<get>
                	    @@object.getValue(_i, _j)
                	</get>
                </field>
        </type>
        



		<!-- Grid3d -->
        <type name = "grid3d" parent = "$DataLayer">
                <javaname>Grid3d</javaname>

                <declaration>
                	<lhs>Grid3d @@id</lhs>
                	<rhs>null</rhs>
                </declaration>
                
                <set>
                	@@id = @@value
                </set>
                
                <get>
                	@@id
                </get>

                
                <method name = "get-smooth-gradient" type = "vector">
                	<argument name = "point" type = "vector"/>
                </method>
                
                <!-- TODO: experimental feature (to be removed later) -->
                <field name = "data" type = "double">
                	<set>
                		{
                			double[][][] _data = @@object.getData();
                			
                			for (int _i = 0; _i &lt; _data.length; _i++)
                			{
                				for (int _j = 0; _j &lt; _data[0].length; _j++)
                				{
                					for (int _k = 0; _k &lt; _data[0][0].length; _k++)
                						_data[_i][_j][_k] = @@value;
                				}
                			}   
                		}
                	</set>
                	<get>
                	    @@object.getValue(_i, _j, _k)
                	</get>
                </field>
        </type>

        
        
        
        <type name = "DataLayerStep" interface = "true">
        	<javaname>DataLayerStep</javaname>
        
        	<!-- interface method should be implemented in the subclass -->
        	<method name = "step" type = "double" abstract = "true">
        		<argument name = "tick" type = "$long"/>
        		<argument name = "x" type = "$integer"/>
        		<argument name = "y" type = "$integer"/>
        		<argument name = "val" type = "double"/>
        	</method>
        </type>
        
        
        <type name = "parallel-grid" parent = "$DataLayer">
        	<javaname>ParallelGrid</javaname>
        	
        	<method name = "diffuse-one-element" type = "double">
        		<argument name = "x" type = "$integer"/>
        		<argument name = "y" type = "$integer"/>
        		<argument name = "val" type = "double"/>
        		
        		<translation>
        			@@object.DiffuseOneElement(@x, @y, @val)
        		</translation>
        	</method>
        </type>
        
        
        <type name = "diffuse-grid" parent = "parallel-grid">
        	<javaname>Diffuse</javaname>
        	
        </type>

</types>
